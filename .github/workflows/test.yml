name: Tests Execution

on:
  push:
    branches:
      - master
      - dev
      - test1
  pull_request:
    branches:
      - master
      - dev

env:
  environment: Development
  certs-path: /home/runner/work/BookToAudio/BookToAudio/BookToAudio.Web/nginx/certs
  image_tag_version: ${{ github.ref_name }} 

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: Selenium Tests
            command: dotnet test --no-restore --filter BookToAudio.SeleniumTests
          - name: Unit Tests
            command: dotnet test --no-restore --filter BookToAudio.UnitTests
          - name: Integration Tests
            command: dotnet test --no-restore --filter BookToAudio.IntegrationTests

    steps:
      - uses: actions/checkout@v4
      
      - name: Fill env file and SSL certificate from secrets
        run: |
          echo Env file is ${{ format('{0}_env_file', env.environment) }}
          echo "${{ secrets[format('{0}_env_file', env.environment)]}}" > .env
          echo "CERTS_PATH=${{ env.certs-path }}" >> .env
          echo "${{ secrets.SSL_ANGULAR_PRIVKEY}}" > ${{ env.certs-path }}/privkey.pem
          echo "${{ secrets.SSL_ANGULAR_FULLCHAIN}}" > ${{ env.certs-path }}/fullchain.pem

      - name: Import environment variables from a env file 
        uses: falti/dotenv-action@v1.1
        with:
          export-variables: true
          mask-variables: true  

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        if: matrix.name == 'Selenium Tests'
        uses: docker/setup-buildx-action@v3  

      - name: Build and start containers
        if: matrix.name == 'Selenium Tests'
        run: |
          docker pull alikberova/booktoaudio.api:${{ env.image_tag_version }} || true
          docker pull alikberova/booktoaudio.web:${{ env.image_tag_version }} || true
          export DOCKER_BUILDKIT=1
          export IMAGE_TAG_VERSION=${{ env.image_tag_version }}
          IMAGE_TAG_VERSION=${{ env.image_tag_version }} docker compose build --build-arg BUILDKIT_INLINE_CACHE=1
          docker compose push
          docker network create elk
          IMAGE_TAG_VERSION=${{ env.image_tag_version }} docker compose up -d

      - name: Cache NuGet Packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

      - name: Restore dependencies
        run: dotnet restore --no-cache

      - name: Run Tests
        run: ${{ matrix.command }}

      - name: Log Backend Logs (if Selenium tests failed)
        if: matrix.name == 'Selenium Tests' && failure()
        run: docker logs api